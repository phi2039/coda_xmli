//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.03 at 01:45:22 AM EST 
//


package com.coda.efinance.schemas.common;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeDataMetadataSetTypesb.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeDataMetadataSetTypesb"&gt;
 *   &lt;restriction base="{http://www.coda.com/efinance/schemas/common}typeBaseEnum"&gt;
 *     &lt;enumeration value="data_metadata_fact_table"/&gt;
 *     &lt;enumeration value="data_metadata_asset_fact_table"/&gt;
 *     &lt;enumeration value="data_metadata_summary_table"/&gt;
 *     &lt;enumeration value="data_metadata_asset_book_summary"/&gt;
 *     &lt;enumeration value="data_metadata_balance_table"/&gt;
 *     &lt;enumeration value="data_metadata_dimension"/&gt;
 *     &lt;enumeration value="data_metadata_kpi_result"/&gt;
 *     &lt;enumeration value="data_metadata_hierarchies"/&gt;
 *     &lt;enumeration value="data_metadata_maps"/&gt;
 *     &lt;enumeration value="data_metadata_parameters"/&gt;
 *     &lt;enumeration value="data_metadata_other"/&gt;
 *     &lt;enumeration value="data_metadata_dim_company"/&gt;
 *     &lt;enumeration value="data_metadata_dim_currency"/&gt;
 *     &lt;enumeration value="data_metadata_dim_time"/&gt;
 *     &lt;enumeration value="data_metadata_dim_nominal"/&gt;
 *     &lt;enumeration value="data_metadata_dim_analysis"/&gt;
 *     &lt;enumeration value="data_metadata_dim_rate_type"/&gt;
 *     &lt;enumeration value="data_metadata_dim_measure"/&gt;
 *     &lt;enumeration value="none"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "typeDataMetadataSetTypesb")
@XmlEnum
public enum TypeDataMetadataSetTypesb {

    @XmlEnumValue("data_metadata_fact_table")
    DATA_METADATA_FACT_TABLE("data_metadata_fact_table"),
    @XmlEnumValue("data_metadata_asset_fact_table")
    DATA_METADATA_ASSET_FACT_TABLE("data_metadata_asset_fact_table"),
    @XmlEnumValue("data_metadata_summary_table")
    DATA_METADATA_SUMMARY_TABLE("data_metadata_summary_table"),
    @XmlEnumValue("data_metadata_asset_book_summary")
    DATA_METADATA_ASSET_BOOK_SUMMARY("data_metadata_asset_book_summary"),
    @XmlEnumValue("data_metadata_balance_table")
    DATA_METADATA_BALANCE_TABLE("data_metadata_balance_table"),
    @XmlEnumValue("data_metadata_dimension")
    DATA_METADATA_DIMENSION("data_metadata_dimension"),
    @XmlEnumValue("data_metadata_kpi_result")
    DATA_METADATA_KPI_RESULT("data_metadata_kpi_result"),
    @XmlEnumValue("data_metadata_hierarchies")
    DATA_METADATA_HIERARCHIES("data_metadata_hierarchies"),
    @XmlEnumValue("data_metadata_maps")
    DATA_METADATA_MAPS("data_metadata_maps"),
    @XmlEnumValue("data_metadata_parameters")
    DATA_METADATA_PARAMETERS("data_metadata_parameters"),
    @XmlEnumValue("data_metadata_other")
    DATA_METADATA_OTHER("data_metadata_other"),
    @XmlEnumValue("data_metadata_dim_company")
    DATA_METADATA_DIM_COMPANY("data_metadata_dim_company"),
    @XmlEnumValue("data_metadata_dim_currency")
    DATA_METADATA_DIM_CURRENCY("data_metadata_dim_currency"),
    @XmlEnumValue("data_metadata_dim_time")
    DATA_METADATA_DIM_TIME("data_metadata_dim_time"),
    @XmlEnumValue("data_metadata_dim_nominal")
    DATA_METADATA_DIM_NOMINAL("data_metadata_dim_nominal"),
    @XmlEnumValue("data_metadata_dim_analysis")
    DATA_METADATA_DIM_ANALYSIS("data_metadata_dim_analysis"),
    @XmlEnumValue("data_metadata_dim_rate_type")
    DATA_METADATA_DIM_RATE_TYPE("data_metadata_dim_rate_type"),
    @XmlEnumValue("data_metadata_dim_measure")
    DATA_METADATA_DIM_MEASURE("data_metadata_dim_measure"),
    @XmlEnumValue("none")
    NONE("none");
    private final String value;

    TypeDataMetadataSetTypesb(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeDataMetadataSetTypesb fromValue(String v) {
        for (TypeDataMetadataSetTypesb c: TypeDataMetadataSetTypesb.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

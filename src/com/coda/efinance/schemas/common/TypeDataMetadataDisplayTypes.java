//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.03 at 01:45:22 AM EST 
//


package com.coda.efinance.schemas.common;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeDataMetadataDisplayTypes.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeDataMetadataDisplayTypes"&gt;
 *   &lt;restriction base="{http://www.coda.com/efinance/schemas/common}typeBaseEnum"&gt;
 *     &lt;enumeration value="data_metadata_attachment"/&gt;
 *     &lt;enumeration value="data_metadata_code"/&gt;
 *     &lt;enumeration value="data_metadata_text"/&gt;
 *     &lt;enumeration value="data_metadata_docnum"/&gt;
 *     &lt;enumeration value="data_metadata_integer"/&gt;
 *     &lt;enumeration value="data_metadata_small_integer"/&gt;
 *     &lt;enumeration value="data_metadata_enumeration"/&gt;
 *     &lt;enumeration value="data_metadata_oneofn"/&gt;
 *     &lt;enumeration value="data_metadata_boolean"/&gt;
 *     &lt;enumeration value="data_metadata_float"/&gt;
 *     &lt;enumeration value="data_metadata_percent"/&gt;
 *     &lt;enumeration value="data_metadata_rate"/&gt;
 *     &lt;enumeration value="data_metadata_decimal"/&gt;
 *     &lt;enumeration value="data_metadata_money"/&gt;
 *     &lt;enumeration value="data_metadata_id"/&gt;
 *     &lt;enumeration value="data_metadata_datetime"/&gt;
 *     &lt;enumeration value="data_metadata_date"/&gt;
 *     &lt;enumeration value="data_metadata_time"/&gt;
 *     &lt;enumeration value="data_metadata_year_period"/&gt;
 *     &lt;enumeration value="data_metadata_unsupported"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "typeDataMetadataDisplayTypes")
@XmlEnum
public enum TypeDataMetadataDisplayTypes {

    @XmlEnumValue("data_metadata_attachment")
    DATA_METADATA_ATTACHMENT("data_metadata_attachment"),
    @XmlEnumValue("data_metadata_code")
    DATA_METADATA_CODE("data_metadata_code"),
    @XmlEnumValue("data_metadata_text")
    DATA_METADATA_TEXT("data_metadata_text"),
    @XmlEnumValue("data_metadata_docnum")
    DATA_METADATA_DOCNUM("data_metadata_docnum"),
    @XmlEnumValue("data_metadata_integer")
    DATA_METADATA_INTEGER("data_metadata_integer"),
    @XmlEnumValue("data_metadata_small_integer")
    DATA_METADATA_SMALL_INTEGER("data_metadata_small_integer"),
    @XmlEnumValue("data_metadata_enumeration")
    DATA_METADATA_ENUMERATION("data_metadata_enumeration"),
    @XmlEnumValue("data_metadata_oneofn")
    DATA_METADATA_ONEOFN("data_metadata_oneofn"),
    @XmlEnumValue("data_metadata_boolean")
    DATA_METADATA_BOOLEAN("data_metadata_boolean"),
    @XmlEnumValue("data_metadata_float")
    DATA_METADATA_FLOAT("data_metadata_float"),
    @XmlEnumValue("data_metadata_percent")
    DATA_METADATA_PERCENT("data_metadata_percent"),
    @XmlEnumValue("data_metadata_rate")
    DATA_METADATA_RATE("data_metadata_rate"),
    @XmlEnumValue("data_metadata_decimal")
    DATA_METADATA_DECIMAL("data_metadata_decimal"),
    @XmlEnumValue("data_metadata_money")
    DATA_METADATA_MONEY("data_metadata_money"),
    @XmlEnumValue("data_metadata_id")
    DATA_METADATA_ID("data_metadata_id"),
    @XmlEnumValue("data_metadata_datetime")
    DATA_METADATA_DATETIME("data_metadata_datetime"),
    @XmlEnumValue("data_metadata_date")
    DATA_METADATA_DATE("data_metadata_date"),
    @XmlEnumValue("data_metadata_time")
    DATA_METADATA_TIME("data_metadata_time"),
    @XmlEnumValue("data_metadata_year_period")
    DATA_METADATA_YEAR_PERIOD("data_metadata_year_period"),
    @XmlEnumValue("data_metadata_unsupported")
    DATA_METADATA_UNSUPPORTED("data_metadata_unsupported");
    private final String value;

    TypeDataMetadataDisplayTypes(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeDataMetadataDisplayTypes fromValue(String v) {
        for (TypeDataMetadataDisplayTypes c: TypeDataMetadataDisplayTypes.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

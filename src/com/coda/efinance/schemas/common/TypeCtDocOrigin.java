//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.03 at 01:45:22 AM EST 
//


package com.coda.efinance.schemas.common;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeCtDocOrigin.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeCtDocOrigin"&gt;
 *   &lt;restriction base="{http://www.coda.com/efinance/schemas/common}typeBaseEnum"&gt;
 *     &lt;enumeration value="doc_origin_yearend"/&gt;
 *     &lt;enumeration value="doc_origin_archive"/&gt;
 *     &lt;enumeration value="doc_origin_po"/&gt;
 *     &lt;enumeration value="doc_origin_normal"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "typeCtDocOrigin")
@XmlEnum
public enum TypeCtDocOrigin {


    /**
     * Year end document.
     * 
     */
    @XmlEnumValue("doc_origin_yearend")
    DOC_ORIGIN_YEAREND("doc_origin_yearend"),

    /**
     * Archive document.
     * 
     */
    @XmlEnumValue("doc_origin_archive")
    DOC_ORIGIN_ARCHIVE("doc_origin_archive"),

    /**
     * Purchase Order document.
     * 
     */
    @XmlEnumValue("doc_origin_po")
    DOC_ORIGIN_PO("doc_origin_po"),

    /**
     * Normal document.
     * 
     */
    @XmlEnumValue("doc_origin_normal")
    DOC_ORIGIN_NORMAL("doc_origin_normal");
    private final String value;

    TypeCtDocOrigin(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeCtDocOrigin fromValue(String v) {
        for (TypeCtDocOrigin c: TypeCtDocOrigin.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

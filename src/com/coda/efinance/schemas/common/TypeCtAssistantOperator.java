//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.03 at 01:45:22 AM EST 
//


package com.coda.efinance.schemas.common;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeCtAssistantOperator.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeCtAssistantOperator"&gt;
 *   &lt;restriction base="{http://www.coda.com/efinance/schemas/common}typeBaseEnum"&gt;
 *     &lt;enumeration value="eq"/&gt;
 *     &lt;enumeration value="ne"/&gt;
 *     &lt;enumeration value="lt"/&gt;
 *     &lt;enumeration value="lte"/&gt;
 *     &lt;enumeration value="gt"/&gt;
 *     &lt;enumeration value="gte"/&gt;
 *     &lt;enumeration value="abseq"/&gt;
 *     &lt;enumeration value="like"/&gt;
 *     &lt;enumeration value="notlike"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "typeCtAssistantOperator")
@XmlEnum
public enum TypeCtAssistantOperator {


    /**
     * equal to
     * 
     */
    @XmlEnumValue("eq")
    EQ("eq"),

    /**
     * not equal to
     * 
     */
    @XmlEnumValue("ne")
    NE("ne"),

    /**
     * less than
     * 
     */
    @XmlEnumValue("lt")
    LT("lt"),

    /**
     * less than or equal to
     * 
     */
    @XmlEnumValue("lte")
    LTE("lte"),

    /**
     * greater than
     * 
     */
    @XmlEnumValue("gt")
    GT("gt"),

    /**
     * greater than or equal to
     * 
     */
    @XmlEnumValue("gte")
    GTE("gte"),
    @XmlEnumValue("abseq")
    ABSEQ("abseq"),

    /**
     * like
     * 
     */
    @XmlEnumValue("like")
    LIKE("like"),

    /**
     * not like
     * 
     */
    @XmlEnumValue("notlike")
    NOTLIKE("notlike");
    private final String value;

    TypeCtAssistantOperator(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeCtAssistantOperator fromValue(String v) {
        for (TypeCtAssistantOperator c: TypeCtAssistantOperator.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}

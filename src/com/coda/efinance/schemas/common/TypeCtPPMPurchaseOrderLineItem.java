//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.03 at 01:45:22 AM EST 
//


package com.coda.efinance.schemas.common;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for typeCtPPMPurchaseOrderLineItem.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="typeCtPPMPurchaseOrderLineItem"&gt;
 *   &lt;restriction base="{http://www.coda.com/efinance/schemas/common}typeBaseEnum"&gt;
 *     &lt;enumeration value="purchase_order_line_number"/&gt;
 *     &lt;enumeration value="product_code"/&gt;
 *     &lt;enumeration value="product_name"/&gt;
 *     &lt;enumeration value="product_short_name"/&gt;
 *     &lt;enumeration value="supplier_code"/&gt;
 *     &lt;enumeration value="temporary"/&gt;
 *     &lt;enumeration value="product_type"/&gt;
 *     &lt;enumeration value="ordered_quantity"/&gt;
 *     &lt;enumeration value="ordered_not_invoiced_quantity"/&gt;
 *     &lt;enumeration value="received_not_invoiced_quantity"/&gt;
 *     &lt;enumeration value="ordered_not_invoiced_value"/&gt;
 *     &lt;enumeration value="received_not_invoiced_value"/&gt;
 *     &lt;enumeration value="unit_cost"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "typeCtPPMPurchaseOrderLineItem")
@XmlEnum
public enum TypeCtPPMPurchaseOrderLineItem {

    @XmlEnumValue("purchase_order_line_number")
    PURCHASE_ORDER_LINE_NUMBER("purchase_order_line_number"),
    @XmlEnumValue("product_code")
    PRODUCT_CODE("product_code"),
    @XmlEnumValue("product_name")
    PRODUCT_NAME("product_name"),
    @XmlEnumValue("product_short_name")
    PRODUCT_SHORT_NAME("product_short_name"),
    @XmlEnumValue("supplier_code")
    SUPPLIER_CODE("supplier_code"),
    @XmlEnumValue("temporary")
    TEMPORARY("temporary"),
    @XmlEnumValue("product_type")
    PRODUCT_TYPE("product_type"),
    @XmlEnumValue("ordered_quantity")
    ORDERED_QUANTITY("ordered_quantity"),
    @XmlEnumValue("ordered_not_invoiced_quantity")
    ORDERED_NOT_INVOICED_QUANTITY("ordered_not_invoiced_quantity"),
    @XmlEnumValue("received_not_invoiced_quantity")
    RECEIVED_NOT_INVOICED_QUANTITY("received_not_invoiced_quantity"),
    @XmlEnumValue("ordered_not_invoiced_value")
    ORDERED_NOT_INVOICED_VALUE("ordered_not_invoiced_value"),
    @XmlEnumValue("received_not_invoiced_value")
    RECEIVED_NOT_INVOICED_VALUE("received_not_invoiced_value"),
    @XmlEnumValue("unit_cost")
    UNIT_COST("unit_cost");
    private final String value;

    TypeCtPPMPurchaseOrderLineItem(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TypeCtPPMPurchaseOrderLineItem fromValue(String v) {
        for (TypeCtPPMPurchaseOrderLineItem c: TypeCtPPMPurchaseOrderLineItem.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
